<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	<!-- 
		1. 데이터베이스 정보를 모아서 전송
		2. SqlSessionFactoryBean -> getConnection()/disConnection()
		3. SQL 문장을 읽어 구현(인터페이스 구현)
		   -> 한 개씩 구현
		   -> 패키지 단위 구현
	 -->
	<util:properties id="db" location="/WEB-INF/config/db.properties"/>
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource"
		p:driverClassName="#{db['driver']}"
		p:url="#{db['url']}"
		p:username="#{db['username']}"
		p:password="#{db['password']}"
	/>
	<!-- Transaction 등록 -> @Transactional이 동작할 수 있도록 한다 -->
	<tx:annotation-driven/>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="ds"
	/>
	<!-- Config.xml 등록 -->
	<bean id="ssf" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="ds"
		p:configLocation="/WEB-INF/config/Config.xml"
	/>
	<mybatis-spring:scan base-package="com.sist.mapper"
		factory-ref="ssf"
	/>
</beans>
